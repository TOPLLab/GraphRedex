#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Fira Code\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1798 0 28 3 12 #"#lang scheme"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(4
 #";; this is a formulation of the pi-calculus in redex, following Miln"
 #"er's 1990 paper,"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
(5
 #";; \"Functions as Processes\", available online (for now, anyhow) at"
 #":"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";; ftp://ftp.inria.fr/INRIA/publication/publi-ps-gz/RR/RR-1154.ps.gz"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(6
 #";; the challenge here is handling the structural congruence rules; i"
 #"n particular,"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(7
 #";; these rules use congruence \"as needed\" to make the reductions w"
 #"ork. An alternate"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(8
 #";; solution would be to determine a canonical representative for eac"
 #"h of the"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(9
 #";; equivalence classes implied by structural congruence, and to form"
 #"ulate reduction"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(10
 #";; rules that are guaranteed to converge to this canonical element. "
 #" This would "
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(11
 #";; have the advantage that you wouldn't have to trust that my \"as n"
 #"eeded\" rules"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(12
 #";; are adequate, but ... I couldn't see how to do it cleanly in the "
 #"presence of"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(13
 #";; replicating terms. Also, this solution has the advantage that its"
 #" steps match"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; those of milner; each of his steps is exactly one of our steps."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
(14
 #";; this model performs no \"garbage collection\" to remove dead term"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 25 #"redex/reduction-semantics"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 37 3 10 #"rename-out"
0 0 24 3 2 #" ("
0 0 31 3 3 #"red"
0 0 24 3 1 #" "
0 0 14 3 10 #"reductions"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 15 #"define-language"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #" ("
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 8 #")       "
0 0 17 3 23 #";; parallel composition"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 4 #"zero"
0 0 24 3 9 #"         "
0 0 17 3 19 #";; dead computation"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 6 #")     "
0 0 17 3 13 #";; fresh name"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #")  "
0 0 17 3 11 #";; sending "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 4 #")   "
0 0 17 3 12 #";; receiving"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 9 #"))       "
0 0 17 3 14 #";; replication"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 23 #";; evaluation contexts:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 6 #"define"
0 0 24 3 1 #" "
0 0 31 3 1 #"r"
0 0 31 3 2 #"ed"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 37 3 18 #"reduction-relation"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 78
(15
 #";; the only reduction rule: an \"in\" matches with an \"out\" on the"
 #" same channel."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"-->"
0 0 24 3 2 #" ("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 3 #"E_1"
0 0 24 3 3 #" (("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 5 #"E_out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 14 3 3 #"_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 3 #"E_1"
0 0 24 3 2 #" ("
0 0 31 3 10 #"maybe-lift"
0 0 24 3 1 #" "
0 0 31 3 4 #"sent"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 2 #") "
0 0 31 3 5 #"E_out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"fresh"
0 0 24 3 1 #" "
0 0 31 3 4 #"sent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 54 #";; the name of the channel must be free on both sides:"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 14 #"side-condition"
0 0 24 3 2 #" ("
0 0 37 3 3 #"and"
0 0 24 3 2 #" ("
0 0 37 3 3 #"not"
0 0 24 3 2 #" ("
0 0 37 3 6 #"member"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 2 #" ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 37 3 3 #"not"
0 0 24 3 2 #" ("
0 0 37 3 6 #"member"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 2 #" ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 5 #"E_out"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 62
#";; EXACTLY THE SAME except in & out are reversed in the input:"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(16
 #";; maybe-lift : given a fresh identifier and two context/\317\200 pa"
 #"irs, perform replication"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(17
 #";; on each pair if necessary and then lift the nu-binding of the a_o"
 #" name if necessary"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";; (renaming it a_lifted)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 10 #"maybe-lift"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 72
(18
 #";; the name being sent needs lifting, so that it includes the recipi"
 #"ent:"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 10 #"maybe-lift"
0 0 24 3 1 #" "
0 0 31 3 8 #"a_lifted"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 2 #") "
0 0 31 3 5 #"E_out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 8 #"a_lifted"
0 0 24 3 3 #" (("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_i\302\254!"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 8 #"a_lifted"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"in-hole"
0 0 24 3 2 #" ("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 8 #"a_lifted"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_o\302\254!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 8 #"a_lifted"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_i\302\254!"
0 0 24 3 3 #"  ("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_o\302\254!"
0 0 24 3 2 #" ("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 5 #"E_out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"side-condition"
0 0 24 3 2 #" ("
0 0 37 3 6 #"member"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 2 #" ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 5 #"E_out"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 33 #";; otherwise, no need to lift nu:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 10 #"maybe-lift"
0 0 24 3 1 #" "
0 0 31 3 8 #"a_lifted"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 2 #") "
0 0 31 3 5 #"E_out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   (("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_i\302\254!"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"in-hole"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_o\302\254!"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_i\302\254!"
0 0 24 3 3 #"  ("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 4 #"E_in"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 5 #"\317\200_in"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 31 3 6 #"E_o\302\254!"
0 0 24 3 2 #" ("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 5 #"E_out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 6 #"\317\200_out"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; replicate-as-needed : performs replication to uncover the desired"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; expression"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 1 #" "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 6 #")     "
0 0 14 3 4 #"hole"
0 0 24 3 3 #"]  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 2 #" ("
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #") "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 7 #")    (("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 2 #") "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 2 #" ("
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #") "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 6 #")    ("
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #" ("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #") "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 3 #") ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 2 #" ("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #") "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 7 #")    (("
0 0 31 3 19 #"replicate-as-needed"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 7 #"in-hole"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #") "
0 0 31 3 7 #"\317\200_orig"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(19
 #";; rename-innermost : rename the *innermost* binding of a given name"
 #" along"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; an evaluation context, using another given name. At this point,"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; there should be no bangs along the context. Also, a_from should "
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; be fresh, so there's no need to worry about those collisions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#";; no hole case; the base case is no more bindings of a_from"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 13 #"))         (("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #") "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 12 #"))         ("
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #" ("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #";; this is the last! substitute from here on out:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 5 #"))  ("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 14 #"side-condition"
0 0 24 3 2 #" ("
0 0 37 3 3 #"not"
0 0 24 3 2 #" ("
0 0 37 3 6 #"member"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 2 #" ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 7 #"a_other"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 7 #"a_other"
0 0 24 3 2 #" ("
0 0 31 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; no case for bang.  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; THE REST OF THIS IS BOILERPLATE... (subst, free-vars, etc.)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(20
 #";; BOUND-BY : compute the variables bound along the s\317\200ne of a"
 #" context"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 9 #")     ()]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 6 #"))   ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 6 #"))   ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 4 #")) ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_rest"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 31 3 6 #"a_rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 4 #")) ("
0 0 31 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; SUBST"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(21
 #";; substitute a_to for a_from in \317\200.  Note that renaming may b"
 #"e necessary, "
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #";; when looking inside a binder for a_to."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 4 #"\317\200_1"
0 0 24 3 1 #" "
0 0 31 3 4 #"\317\200_2"
0 0 24 3 5 #")) (("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 4 #"\317\200_1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 4 #"\317\200_2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 41 #";; shadowing of a_from: stop substitution"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 51 #";; shadowing of a_to: rename if a_from occurs free."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_new"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_new"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_new"
0 0 24 3 2 #" ("
0 0 31 3 8 #"fresh-in"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #") "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"side-condition"
0 0 24 3 2 #" ("
0 0 37 3 6 #"member"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 2 #" ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; otherwise, proceed:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_1"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_2"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"out"
0 0 24 3 2 #" ("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 41 #";; shadowing of a_from: stop substitution"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"in"
0 0 24 3 2 #" ("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 2 #") "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #";; shadowing of a_to: rename if a_from occurs free"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"in"
0 0 24 3 2 #" ("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 31 3 5 #"a_new"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_new"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_new"
0 0 24 3 2 #" ("
0 0 31 3 8 #"fresh-in"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #") "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"side-condition"
0 0 24 3 2 #" ("
0 0 37 3 6 #"member"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 2 #" ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; otherwise, proceed:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"in"
0 0 24 3 2 #" ("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 2 #") "
0 0 31 3 3 #"a_x"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55
#";; SUBST/E : substitute a_to for a_from in \317\200; assumes "
0 0 24 29 1 #"\n"
0 0 17 3 65
(22
 #";; there are no more bindings for a_from along the context s\317\200"
 #"ne,"
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #";; and that a_to is fresh (enough)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 7 #")      "
0 0 14 3 4 #"hole"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 8 #"))    (("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #") ("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 31 3 1 #"E"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 8 #"))    (("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #") ("
0 0 31 3 5 #"subst"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 5 #"))  ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 2 #" ("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 31 3 1 #"E"
0 0 24 3 5 #"))  ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 31 3 7 #"subst/E"
0 0 24 3 1 #" "
0 0 31 3 6 #"a_from"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_to"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; SUBST-NAME: replace a_from with a_to, leave other names alone."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_src"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_tgt"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_src"
0 0 24 3 4 #")   "
0 0 31 3 5 #"a_tgt"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 10 #"subst-name"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_src"
0 0 24 3 1 #" "
0 0 31 3 5 #"a_tgt"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 8 #")       "
0 0 31 3 1 #"a"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(23
 #";; FREE-VARS : return a list of the variables that occur free in the"
 #" term"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";; WARNING: MAY INCLUDE DUPLICATES..."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #") ()]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 31 3 4 #"\317\200_1"
0 0 24 3 1 #" "
0 0 31 3 4 #"\317\200_2"
0 0 24 3 4 #")) ("
0 0 31 3 3 #"a_1"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 1 #" "
0 0 31 3 3 #"a_2"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 31 3 3 #"a_1"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 4 #"\317\200_1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 31 3 3 #"a_2"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 4 #"\317\200_2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 4 #")) ("
0 0 31 3 9 #"set-minus"
0 0 24 3 2 #" ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #") "
0 0 31 3 1 #"a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 4 #")) ("
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_o"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 4 #")) ("
0 0 31 3 4 #"a_ch"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 31 3 9 #"set-minus"
0 0 24 3 2 #" ("
0 0 31 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 2 #") "
0 0 31 3 3 #"a_x"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; remove *all* instances of a_kilt from (a ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 9 #"set-minus"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"set-minus"
0 0 24 3 2 #" ("
0 0 31 3 3 #"a_1"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 31 3 6 #"a_kilt"
0 0 24 3 1 #" "
0 0 31 3 3 #"a_2"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 31 3 6 #"a_kilt"
0 0 24 3 3 #") ("
0 0 31 3 9 #"set-minus"
0 0 24 3 2 #" ("
0 0 31 3 3 #"a_1"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 1 #" "
0 0 31 3 3 #"a_2"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 2 #") "
0 0 31 3 6 #"a_kilt"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 9 #"set-minus"
0 0 24 3 2 #" ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 31 3 6 #"a_kilt"
0 0 24 3 3 #") ("
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 37 3 3 #"..."
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; provide variable-not-in as a metafunction:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 37 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 31 3 11 #"\317\200-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 31 3 8 #"fresh-in"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 31 3 8 #"fresh-in"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 37 3 15 #"variable-not-in"
0 0 24 3 2 #" ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 2 #"\317\200"
0 0 24 3 3 #") ("
0 0 37 3 4 #"term"
0 0 24 3 1 #" "
0 0 31 3 1 #"a"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; TEST CASES"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9       10699 21           0 0           0 1782 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; simplest communication:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; check simplest substitution"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; check simple nesting"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 4 #" ((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")) (("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 4 #" ((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")) (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; outer context:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #" ((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")) (("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #" ((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")) (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; with bang replication:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #" ((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")) (("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #" (((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 6 #")))) ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                             (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; with lifting (depends on fresh name):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #" ((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 7 #")))) (("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                               (((("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; need longer examples..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; this on taken from wikipedia:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-->"
0 0 24 3 1 #" "
0 0 14 3 3 #"red"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #") "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 4 #"sent"
0 0 24 3 3 #" (("
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 16 #"rename-innermost"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 3 #" (("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hole"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 3 #" (("
0 0 14 3 4 #"hole"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 19 #"replicate-as-needed"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"!"
0 0 24 3 3 #" (("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                   ((("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hole"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 1 #"!"
0 0 24 3 3 #" (("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-by"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-by"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"set-minus"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #")) "
0 0 21 3 1 #"`"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 3 #" (("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 7 #")))))  "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a3"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-equal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(24
 #";; MILNER'S (1990) TRANSLATION FROM CBN-LAMBDA CALCULUS TO PI-CALCUL"
 #"US:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-language"
0 0 24 3 1 #" "
0 0 14 3 15 #"lambda-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"variable-except"
0 0 24 3 1 #" "
0 0 14 3 3 #"lam"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 4 #"hole"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"\317\200"
0 0 24 3 2 #" ("
0 0 14 3 2 #"\317\200"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"zero"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; not bothering to define reduction..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
(25
 #";; Encode-as-\317\200 : turn an lc term into a \317\200-calculus ter"
 #"m."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 14 3 15 #"lambda-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 4 #")  ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 12 #")          ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 2 #" ("
0 0 14 3 3 #"e_1"
0 0 24 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 4 #")  ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #" (("
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 1 #" "
0 0 14 3 3 #"e_1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 2 #"nu"
0 0 24 3 1 #" "
0 0 14 3 3 #"a_x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"a_x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 14 #"binding-encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 14 3 3 #"a_x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 15 #"variable-not-in"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 3 #"e_2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(26
 #";; binding-encode : represent a binding.  This is the key idea: repr"
 #"esent a binding"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(27
 #";; as a replicating agent that listens on a channel and delivers a c"
 #"hannel corresponding"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";; to the argument to anyone that wants it."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-metafunction"
0 0 24 3 1 #" "
0 0 14 3 15 #"lambda-calculus"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 14 #"binding-encode"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 2 #"\317\200"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 14 #"binding-encode"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 12 #"encode-as-\317\200"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(28
 #";;; test sequence adapted from paper for the term ((lam x x) (lam y "
 #"y))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(test--> red"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";         (term (encode-as-\317\200 ((lam x x) (lam y y)) chan))"
0 0 24 29 1 #"\n"
0 0 17 3 125
(29
 #";         (term (nu v (nu sent ((in v v (out sent v zero)) (out v ch"
 #"an (! (in sent w (in w y (in w v (out y v zero)))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(test--> red"
0 0 24 29 1 #"\n"
0 0 17 3 124
(30
 #";         (term (nu v (nu sent ((in v v (out sent v zero)) (out v ch"
 #"an (! (in sent w (in w y (in w v (out y v zero))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(31
 #";         (term (nu v (nu sent ((out sent chan zero) (! (in sent w ("
 #"in w y (in w v (out y v zero))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(test--> red"
0 0 24 29 1 #"\n"
0 0 17 3 105
(32
 #";         (term (nu v (nu sent ((out sent chan zero) (! (in sent w ("
 #"in w y (in w v (out y v zero)))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 131
(33
 #";         (term (nu v (nu sent (((in chan y (in chan v (out y v zero"
 #"))) (! (in sent w (in w y (in w v (out y v zero)))))) zero)))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 123
(34
 #";;; observe that the bang clause can be collected: it's listening on"
 #" a channel that can't escape. So (observes Milner) this"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; is equivalent to (encode-as-\317\200 (lam y y) chan)."
0 0 24 29 1 #"\n"
0           0 0           0
